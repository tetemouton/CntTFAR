ls_fish %<>% mutate(tot_ll_tun = alb_n + bet_n + yft_n, lond_pos = ifelse(lond < 0, 360 + lond, lond),
lat1 = floor(latd) + .5, lon1 = floor(lond_pos) + .5,
cell1 = paste(lat1, lon1))
table(ls_fish$tot_ll_tun == 0)
windows(4000,4000)
hist(ls_fish$alb_kg_est, breaks = 1000)
hist(ls_fish$alb_n_est, breaks = 1000)
windows(4000,4000)
pl <- ggplot(ls_fish, aes(x = lond_pos, y = latd)) + geom_point(colour = alpha("black", .05), position = "jitter")
print(pl)
mod_df <- ls_fish %>% select(year, month, vessel_id, flag_id, set_time, cell1, hooks_n, alb_kg_est) %>%
mutate(log_cat = log(alb_kg_est + .5))
# Some missing values for set time and alb_kg_est
mod_df <- filter(mod_df, !is.na(alb_kg_est))
mod <- glm(log_cat ~ hooks_n + factor(year) + factor(month) + factor(vessel_id) + factor(flag_id) + factor(cell1), data = mod_df)
mod
summary(mod)
windows()
hist(mod_df$log_cat, breaks = 500)
tmp <- predict(mod)
plot(mod_df$alb_kg_est, exp(predict(mod)), col=alpha("black",.1)); abline(a=0,b=1,col="red")
421000*.027
421000*.0275
421000*.0278
421000*.028
421000*.029
70300*.185
70300*.19
70300*.195
39000*.18
39000*.185
39000*.19
7690*1.17
7690*1.19
7690*1.195
3777/.032
110000*.032
115000*.032
115000*.035
145864+1036/.92+65556+45011/.92+8000
145864+1036/.92+65556+45011/.92+8000+520000
.185/.175
.185/.175*8000
70300*.185
70300*.19
13536+9011+11579+6942
13536+9011+11579+6942+3777
3650/.39
9359*.41
3650/.395
9240*.41
55000/.92
.405/.395
.41/.395
.41/.395*8000
.185/.18
.185/.18*8000
rundir <- "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/"
gridruns <- list.files(path=rundir, pattern="S", full.names=F, ignore.case=TRUE)
gridruns
library(FLR4MFCL)
i=gridruns[1]
i
counter = counter+1
counter=0
counter = counter+1
rawrep <- paste0(rundir, i, "/plot-final3.par.rep")
rawrep
#  readrep <- read.rep(rawrep)
# dep1<-rowSums(readrep$AdultBiomass)/rowSums(readrep$AdultBiomass.nofish)
readrep <- read.MFCLRep(rawrep)
#use seasonMeans to get annual values as opposed to quarterly values
dep1<-qts(areaSums(adultBiomass(readrep)))/qts(areaSums(adultBiomass_nofish(readrep)))
dep1
head(readrep@adultBiomass)
FLR4MFCL::qts
dim(readrep@adultBiomass)
readrep@adultBiomass[1,1,1,1,1,1]
readrep@adultBiomass[1,1,1,1,2,1]
dep1
dim(dep1)
dim(adultBiomass(readrep))
dep2 <- qts(adultBiomass(readrep))/qts(adultBiomass_nofish(readrep))
dim(dep2)
head(as.data.frame(dep2))
library(ggplot2)
library(magrittr)
library(tidyverse)
library(ggthemes)
base_pth <- "C:/Albacore_Catch_Modelling/"
ls_dat <- read.csv(file = paste0(base_pth, "Data/ls_data_tufman_fj.csv"), header = TRUE)
ace_dat <- read.csv(file = paste0(base_pth, "Data/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
load(paste0(base_pth, "Data/vms_day_dat_fj.RData"), verbose = TRUE) # Object is vms_dat
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
# Get number of sets by vessels per year - note that this data is 1 row per set
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = n()) %>% arrange(year, -Nset) %>% mutate(ves = row_number())
ls_fish %<>% mutate(tot_ll_tun = alb_n + bet_n + yft_n, lond_pos = ifelse(lond < 0, 360 + lond, lond),
lat1 = floor(latd) + .5, lon1 = floor(lond_pos) + .5,
cell1 = paste(lat1, lon1))
table(ls_fish$tot_ll_tun == 0)
windows(4000,4000)
hist(ls_fish$alb_kg_est, breaks = 1000)
hist(ls_fish$alb_n_est, breaks = 1000)
windows(4000,4000)
pl <- ggplot(ls_fish, aes(x = lond_pos, y = latd)) + geom_point(colour = alpha("black", .05), position = "jitter")
print(pl)
head(ls_fish)
view(ls_fish)
unique(ls_fish$vessel_name)
unique(ls_fish$vessel_name)
head(ls_fish)
unique(ls_fish$vesselname)
table(ls_fish$vesselname)
.185/.18
.1*.1
.1*.15
.21/.205
.21/.205*7000
.215/.205*7000
7000/.205
library(ggplot2)
library(magrittr)
library(tidyverse)
library(ggthemes)
library(lubridate)
theme_set(theme_bw())
base_pth <- "C:/Albacore_Catch_Modelling/"
# Read in logsheets
ls_dat <- read.csv(file = paste0(base_pth, "Data/TO/ls_data_tufman_to.csv"), header = TRUE)
# Read in Annual Catch Estimates
ace_dat <- read.csv(file = paste0(base_pth, "Data/TO/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
# Load VMS data
load(paste0(base_pth, "Data/TO/vms_day_dat_to.RData"), verbose = TRUE) # Object is vms_dat
# Read in licence information
lic_info <- read.csv(file = paste0(base_pth, "Data/TO/license_info_table.csv"), header = TRUE)
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
head(ls_dat$l_activity_id)
table(ls_dat$l_activity_id,useNA="always")
head(ls_dat)
dim(ls_dat)
view(ls_dat)
view(ls_dat)
view(ls_dat)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
dim(ls_fish)
view(ls_fish)
ls_fish[246:247,]
# Check how many sets have 0 catch of each of 3 tunas
ls_fish %<>% mutate(tot_n = alb_n + bet_n + yft_n)
table(ls_fish$tot_n)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = n())
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n)
table(tot_dat,useNA="always")
table(tot_dat$tot_n,useNA="always")
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = n())
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(factor(tot_n)) %>% summarise(Sets = n())
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n)
head(tot_dat)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = n())
library(ggplot2)
library(magrittr)
library(tidyverse)
library(ggthemes)
library(lubridate)
theme_set(theme_bw())
base_pth <- "C:/Albacore_Catch_Modelling/"
# Read in logsheets
ls_dat <- read.csv(file = paste0(base_pth, "Data/TO/ls_data_tufman_to.csv"), header = TRUE)
# Read in Annual Catch Estimates
ace_dat <- read.csv(file = paste0(base_pth, "Data/TO/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
# Load VMS data
load(paste0(base_pth, "Data/TO/vms_day_dat_to.RData"), verbose = TRUE) # Object is vms_dat
# Read in licence information
lic_info <- read.csv(file = paste0(base_pth, "Data/TO/license_info_table.csv"), header = TRUE)
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = n())
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = dplyr::n())
library(ggplot2)
library(tidyverse)
library(ggthemes)
library(lubridate)
library(magrittr)
theme_set(theme_bw())
base_pth <- "C:/Albacore_Catch_Modelling/"
# Read in logsheets
ls_dat <- read.csv(file = paste0(base_pth, "Data/TO/ls_data_tufman_to.csv"), header = TRUE)
# Read in Annual Catch Estimates
ace_dat <- read.csv(file = paste0(base_pth, "Data/TO/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
# Load VMS data
load(paste0(base_pth, "Data/TO/vms_day_dat_to.RData"), verbose = TRUE) # Object is vms_dat
# Read in licence information
lic_info <- read.csv(file = paste0(base_pth, "Data/TO/license_info_table.csv"), header = TRUE)
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = n())
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = dplyr::n())
tot_dat
windows(5000,4000)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = dplyr::n()) %>% filter(tot_n < 201)
windows(5000,4000)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue", colour = "black") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
windows(7000,4000)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue", colour = "black") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue", colour = "grey") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue", width = 0.8) +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
windows(7000,4000)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = .8, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = .7, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
base_pth
savePlot(filename = paste0(base_pth, "Plots/TO/Total_tun_hist.png"), type = "png")
.185/.18
.185/.18*7000
.185/.18*11000
12206*.18
.19/.18*11000
20000/.18
20000*.18
59000*.18
59000*.19
69000*.18
69000*.19
library(sf)
library(tidyverse)
reg3 <- c("POLYGON((120 30,145 30,145 10,130 10,130 20,120 20,120 30))") %>% st_as_sfc(crs=st_crs(eez)) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
theme_set(theme_bw())
base.dir <- "C:/GitRep/WHATapp/EEZs"
cnt.keep <- read.csv(file=paste0(base.dir, "/Data/PacCountries.csv"), header=TRUE)
eez <- st_read(paste0(base.dir, "/Data/World_EEZ_Files/World_EEZ_v10_2018_0_360.shp"))
eez <- st_read("C:/EEZs/Data/World_EEZ_Files/World_EEZ_v10_2018_0_360.shp")
reg3 <- c("POLYGON((120 30,145 30,145 10,130 10,130 20,120 20,120 30))") %>% st_as_sfc(crs=st_crs(eez)) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
st_area(reg3)
st_crs(eez)
?st_as_sfc
reg3 <- c("POLYGON((120 30,145 30,145 10,130 10,130 20,120 20,120 30))") %>% st_as_sfc(crs=4326) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
st_area(reg3)
45000/1.088
30000*.18
35000*.205
30000*.18
7175+5400
30229*.205
6196+5400
10000/.9
11111*.9
11111*.84
.21/.205
200/218
library(ggplot2)
library(tidyverse)
library(ggthemes)
library(lubridate)
library(magrittr)
theme_set(theme_bw())
base_pth <- "C:/Albacore_Catch_Modelling/"
# Read in logsheets
ls_dat <- read.csv(file = paste0(base_pth, "Data/TO/ls_data_tufman_to.csv"), header = TRUE)
# Read in Annual Catch Estimates
ace_dat <- read.csv(file = paste0(base_pth, "Data/TO/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
# Load VMS data
load(paste0(base_pth, "Data/TO/vms_day_dat_to.RData"), verbose = TRUE) # Object is vms_dat
# Read in licence information
lic_info <- read.csv(file = paste0(base_pth, "Data/TO/license_info_table.csv"), header = TRUE)
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = dplyr::n()) %>% filter(tot_n < 201)
windows(7000,4000)
pl <- ggplot(tot_dat, aes(x = tot_n, y = Sets)) + geom_bar(stat = "identity", width = 1, fill = "steelblue") +
theme_clean() + xlab("No. fish (alb+bet+yft) caught") + ylab("No. of sets")
print(pl)
savePlot(filename = paste0(base_pth, "Plots/TO/Total_tun_hist.png"), type = "png")
dev.off()
# Get number of sets by vessels per year - note that this data is 1 row per set
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = n()) %>% arrange(year, -Nset) %>% mutate(ves = row_number()) # Or use set_id instead of assuming row = 1 set?
theme_set(theme_bw())
base_pth <- "C:/Albacore_Catch_Modelling/"
# Read in logsheets
ls_dat <- read.csv(file = paste0(base_pth, "Data/TO/ls_data_tufman_to.csv"), header = TRUE)
# Read in Annual Catch Estimates
ace_dat <- read.csv(file = paste0(base_pth, "Data/TO/ace_eez_LL_a-yb-ez.csv"), header = TRUE)
# Load VMS data
load(paste0(base_pth, "Data/TO/vms_day_dat_to.RData"), verbose = TRUE) # Object is vms_dat
# Read in licence information
lic_info <- read.csv(file = paste0(base_pth, "Data/TO/license_info_table.csv"), header = TRUE)
# Filter VMS data
vms_mod <- vms_dat %>% filter(log_act_code == "F") %>% mutate(lub_date = ymd(vms_date), year = year(lub_date)) # Only keep fishing records, ymd is very useful (lubridate package)
# Filter logsheet data
ls_fish <- ls_dat %>% filter(l_activity_id == 1)
# Check how many sets have 0 catch of each of 3 tunas
tot_dat <- ls_fish %>% mutate(tot_n = alb_n + bet_n + yft_n) %>% group_by(tot_n) %>% summarise(Sets = dplyr::n()) %>% filter(tot_n < 201)
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = n()) %>% arrange(year, -Nset) %>% mutate(ves = row_number()) # Or use set_id instead of assuming row = 1 set?
# Get number of sets by vessels per year - note that this data is 1 row per set
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = dplyr::n()) %>% arrange(year, -Nset) %>% mutate(ves = row_number()) # Or use set_id instead of assuming row = 1 set?
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = n()) %>% filter(Nset > 4) %>% arrange(year, -Nset) %>% mutate(ves = row_number())
ves_set <- ls_fish %>% group_by(year, vessel_id) %>% summarise(Nset = dplyr::n()) %>% filter(Nset > 4) %>% arrange(year, -Nset) %>% mutate(ves = row_number())
yr_keep <- 2018
ez_keep <- "TO"
ls_yr <- ls_fish %>% filter(year == yr_keep) %>% mutate(lub_set_date = ymd(set_date), lub_ent_date = ymd_hms(entered_date),
set_day = yday(lub_set_date), ent_day = ifelse(year(lub_ent_date) == yr_keep, yday(lub_ent_date), 499))
ace_yr <- ace_dat %>% filter(yy == yr_keep, ez_id == ez_keep) %>% group_by(yy) %>% summarise(alb_mt = sum(alb_mt))
vms_yr <- vms_mod %>% filter(year == yr_keep) %>% mutate(vms_day = yday(lub_date))
vms_yr_pl <- vms_yr %>% group_by(vms_day) %>% # Must check this makes sense and is no. of sets on that day
summarise(Ndays = dplyr::n()) %>% arrange(vms_day) %>% mutate(cum_vms_day = cumsum(Ndays))
windows(4000,4000)
pl <- ggplot(ls_yr, aes(x = alb_kg, y = alb_kg_est)) + geom_point(colour = alpha("black",.2)) + geom_abline(intercept = 0, slope = 1, colour = "red") +
xlab("Recorded albacore (kg)") + ylab("Corrected albacore (kg)") + theme_clean()
print(pl)
ls_yr_pl <- ls_yr %>% group_by(set_day) %>% summarise(Nsets = dplyr::n(), alb_mt = sum(alb_kg)/1000, alb_mt_est = sum(alb_kg_est)/1000) %>% arrange(set_day) %>%
mutate(cum_n_sets = cumsum(Nsets), cum_alb_mt = cumsum(alb_mt), cum_alb_mt_est = cumsum(alb_mt_est))
ves_ls <- ls_yr %>% group_by(vessel_id) %>% summarise(Nsets_ls = dplyr::n())
ves_vms <- vms_yr %>% group_by(vessel_id) %>% summarise(Nsets_vms = dplyr::n())
ves_ls %>% anti_join(ves_vms)
ves_vms %>% anti_join(ves_ls)
ves_comp <- full_join(ves_ls, ves_vms, by = "vessel_id")
ves_comp[is.na(ves_comp)] <- 0
ves_ls
ves_vms
ves_comp
head(vms_mod)
head(ls_fish)
library(RODBC)
myConn <- odbcDriverConnect(connection="driver=SQL Server;server=nouSQL03;database=log_master;
Trusted_Connection=yes;")
tp <- sqlTables(myConn) # to see all the tables in the observer database
view(tp)
dat <- sqlQuery(myConn, "SELECT * FROM RFV ",
stringsAsFactors = FALSE)
head(dat)
dat <- sqlQuery(myConn, "SELECT * FROM wcpfc.RFV ",
stringsAsFactors = FALSE)
head(dat)
library(sf)
library(tidyverse)
reg3 <- c("POLYGON((140 0,290 0,290 -50,140 -50,140 0))") %>% st_as_sfc(crs=4326) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
st_area(reg3)
library(sf)
library(tidyverse)
reg3 <- c("POLYGON((140 0,290 0,290 -50,140 -50,140 0))") %>% st_as_sfc(crs=4326) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
st_area(reg3)/1000000
library(sf)
library(tidyverse)
reg3 <- c("POLYGON((140 0,290 0,290 -50,140 -50,140 0))") %>% st_as_sfc(crs=4326) %>% st_sf(field=c('x','y'), geoms = ., stringsAsFactors=FALSE)
st_area(reg3)/10000
69000*.18
69000*.19
70300*.19
70300*.2
70300*.195
421069*.027
421069*.028
?n
44/6
42/6
60/44
68860*.18
68860*.185
66353+147500+8000+45300/.92
library(FLR4MFCL)
# Albacore 2021
rundir <- "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/"
gridruns <- list.files(path=rundir, pattern="S", full.names=F, ignore.case=TRUE)
counter = 0
i=gridruns[1]
i
rawrep <- paste0(rundir, i, "/plot-final3.par.rep")
#  readrep <- read.rep(rawrep)
# dep1<-rowSums(readrep$AdultBiomass)/rowSums(readrep$AdultBiomass.nofish)
readrep <- read.MFCLRep(rawrep)
# Use seasonMeans to get annual values as opposed to quarterly values
dep1 <- qts(areaSums(adultBiomass(readrep)))/qts(areaSums(adultBiomass_nofish(readrep)))
dep1
dim(dep1)
dep_yr <- yearSums(dep1)
dep_yr
areaSums(adultBiomass(readrep))
yearSums(areaSums(adultBiomass(readrep)))
dep_yr <- seasonMeans(areaSums(adultBiomass(readrep)))
dep_yr
358208+339599+311232+279358
1288397/4
seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep)))
dep_yr_full <- as.data.frame(seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep))))
dep_yr_full
seasonMeans(adultBiomass(readrep))
seasonMeans(adultBiomass(readrep))/adultBiomass_nofish(adultBiomass(readrep))
seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep))
as.data.frame(seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep)))
i
extract_depletion <- function(pth = "S1M1D1R1G1", scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep"){
rawrep <- paste0(rundir, i, "/", finalpar)
readrep <- read.MFCLRep(rawrep)
if(scl == "full"){
dep_yr <- as.data.frame(seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep))))
} else{
dep_yr <- as.data.frame(seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep)))
}
extract_depletion <- function(pth = "S1M1D1R1G1", scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep"){
rawrep <- paste0(rundir, i, "/", finalpar)
readrep <- read.MFCLRep(rawrep)
if(scl == "full"){
dep_yr <- as.data.frame(seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep))))
} else{
dep_yr <- as.data.frame(seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep)))
}
return(dep_yr)
}
extract_depletion(pth = "S1M1D1R1G1", scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
full_dep <- lapply(gridruns[1], extract_depletion)
full_dep
full_dep <- lapply(gridruns[1:2], extract_depletion)
full_dep
gridruns[1:2]
full_dep <- map(extract_depletion, pth = gridruns[1:2], scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
library(tidyverse)
full_dep <- map(extract_depletion, pth = gridruns[1:2], scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
full_dep <- map(gridruns[1:2], extract_depletion, scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
dim(full_dep)
str(full_dep)
library(data.table)
tmp <- rbindlist(full_dep)
extract_depletion <- function(mod_folder = "S1M1D1R1G1", scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep"){
rawrep <- paste0(rundir, mod_folder, "/", finalpar)
readrep <- read.MFCLRep(rawrep)
if(scl == "full"){
dep_yr <- as.data.frame(seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep))))
} else{
dep_yr <- as.data.frame(seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep)))
}
dep_yr <- mutate(dep_y, mod = mod_folder)
return(dep_yr)
}
full_dep <- map(gridruns[1:2], extract_depletion, scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
extract_depletion <- function(mod_folder = "S1M1D1R1G1", scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep"){
rawrep <- paste0(rundir, mod_folder, "/", finalpar)
readrep <- read.MFCLRep(rawrep)
if(scl == "full"){
dep_yr <- as.data.frame(seasonMeans(areaSums(adultBiomass(readrep)))/seasonMeans(areaSums(adultBiomass_nofish(readrep))))
} else{
dep_yr <- as.data.frame(seasonMeans(adultBiomass(readrep))/seasonMeans(adultBiomass_nofish(readrep)))
}
dep_yr <- mutate(dep_yr, mod = mod_folder)
return(dep_yr)
}
full_dep <- map(gridruns[1:2], extract_depletion, scl = "full",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
tmp <- rbindlist(full_dep)
view(tmp)
full_dep <- map(gridruns[1:2], extract_depletion, scl = "regional",
rundir = "//penguin/assessments/alb/2021/backupCCJ/ALB21_Projections/",
finalpar = "plot-final3.par.rep")
full_dep_df <- rbindlist(full_dep)
view(tmp)
